AWSTemplateFormatVersion: 2010-09-09
Description: 'AWS Digital Content Creation Architecture - AWS ThinkBox Deadline. (uksb-1qgdqu75l)'
Transform: AWS::Serverless-2016-10-31

Metadata:
  Version: 1.5.1
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Region configuration
        Parameters:
          - AvailabilityZones
      - Label:
          default: VPC network configuration
        Parameters:
          - VPCName
          - VPCCidr
          - VPCPublicSubnet1Cidr
          - VPCPublicSubnet2Cidr
          - VPCPrivateSubnet1Cidr
          - VPCPrivateSubnet2Cidr
      - Label:
          default: Client VPN Configuration
        Parameters:
          - CreateVPNEndpoint
          - ClientCidrBlock
          - ServerCertificateArn
          - ClientCertificateArn
          - TargetNetworkCidr
      - Label:
          default: Workstation configuration
        Parameters:
          - WorkstationInstanceType
          - WorkstationConnectionManager
          - WorkstationEBSVolumeSize
          - WorkstationAccessCIDR
          - EC2UserPassword
      - Label:
          default: Repository and database configuration
        Parameters:
          - RepositoryInstanceType
          - AppVersion
      - Label:
          default: License server configuration
        Parameters:
          - LicenseServerInstanceType
          - LicenseServerVersion
          - DeadlineLicense
      - Label:
          default: Render node configuration
        Parameters:
          - RenderNodeInstanceType
          - RenderNodeTargetCapacity
    ParameterLabels:
      AvailabilityZones:
        default: Availability Zones
      VPCName:
        default: VPC name
      VPCCidr:
        default: VPC CIDR
      VPCPublicSubnet1Cidr:
        default: Public Subnet 1 CIDR
      VPCPublicSubnet2Cidr:
        default: Public Subnet 2 CIDR
      VPCPrivateSubnet1Cidr:
        default: Private Subnet 1 CIDR
      VPCPrivateSubnet2Cidr:
        default: Private Subnet 2 CIDR
      CreateVPNEndpoint:
        default: Create VPN Endpoint.
      ClientCidrBlock:
        default: Client CIDR for VPN Endpoint
      ServerCertificateArn:
        default: ACM Server Certificate ARN
      ClientCertificateArn:
        default: ACM Client Certificate ARN
      TargetNetworkCidr:
        default: Target Network CIDR for VPN Endpoint
      RepositoryInstanceType:
        default: Render scheduler instance type
      AppVersion:
        default: Deadline application version
      LicenseServerInstanceType:
        default: License server instance type
      LicenseServerVersion:
        default: License server version
      DeadlineLicense:
        default: Deadline license key
      WorkstationInstanceType:
        default: Workstation instance type
      WorkstationConnectionManager:
        deafult: Workstation connection manager
      WorkstationEBSVolumeSize:
        default: Workstation EBS volume size
      EC2UserPassword:
        default: EC2 user password
      WorkstationAccessCIDR:
        default: Workstation access CIDR
      RenderNodeInstanceType:
        default: Render node instance type
      RenderNodeTargetCapacity:
        default: Render node capacity

Parameters:
  AvailabilityZones:
    Type: List<AWS::EC2::AvailabilityZone::Name>
    Description: 'The list of Availability Zones to use for the subnets in the VPC. Select **two** Availability Zones from your list.'

  VPCName:
    Type: String
    Description: 'The name of the VPC.'
    Default: dcc-vpc

  VPCCidr:
    Type: String
    Description: 'The CIDR block for the VPC.'
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: 'CIDR block parameter must be in the form x.x.x.x/16-28'
    Default: 10.0.0.0/16

  VPCPublicSubnet1Cidr:
    Type: String
    Description: 'The CIDR block for the Public Subnet located in Availability Zone 1 of the VPC.'
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: 'CIDR block parameter must be in the form x.x.x.x/16-28'
    Default: 10.0.0.0/24

  VPCPublicSubnet2Cidr:
    Type: String
    Description: 'The CIDR block for the Public Subnet located in Availability Zone 2 of the VPC.'
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: 'CIDR block parameter must be in the form x.x.x.x/16-28'
    Default: 10.0.1.0/24

  VPCPrivateSubnet1Cidr:
    Type: String
    Description: 'The CIDR block for the Private Subnet located in Availability Zone 1 of the VPC.'
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: 'CIDR block parameter must be in the form x.x.x.x/16-28'
    Default: 10.0.2.0/24

  VPCPrivateSubnet2Cidr:
    Type: String
    Description: 'The CIDR block for the Private Subnet located in Availability Zone 2 of the VPC.'
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: 'CIDR block parameter must be in the form x.x.x.x/16-28'
    Default: 10.0.3.0/24

  CreateVPNEndpoint:
    Type: String
    Description: "Should the CloudFormation create a Client VPN Endpoint. Workstation will be placed in Private subnet, if set to 'true'. (Specify 'true' or 'false')"
    ConstraintDescription: Must specify 'true' or 'false'
    AllowedValues:
      - false
      - true
    Default: false

  ClientCidrBlock:
    Type: String
    Description: 'If creating Client VPN endpoint in the solution, specify the IPv4 address range. It should be in CIDR notation from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet.'
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-9]|3[0-2]))$
    ConstraintDescription: 'CIDR block parameter must be in the form x.x.x.x/16-32'
    Default: 10.50.0.0/20

  ServerCertificateArn:
    Type: String
    Description: 'Required if Create Client VPN endpoint is set to `true`.'
    Default: N/A

  ClientCertificateArn:
    Type: String
    Description: 'Required if Create Client VPN endpoint is set to `true`.'
    Default: N/A

  TargetNetworkCidr:
    Type: String
    Description: 'If creating Client VPN endpoint in the solution, specify the IPv4 address range, in CIDR notation, of the network for which access is being authorized.'
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(0[0-9]|1[0-9]|2[0-9]|3[0-2]))$
    ConstraintDescription: 'CIDR block parameter must be in the form x.x.x.x/0-32'
    Default: 10.0.0.0/16

  WorkstationInstanceType:
    Type: String
    Description: 'Artist workstation instance type.'
    AllowedValues:
      - g4dn.xlarge
      - g4dn.2xlarge
      - g4dn.4xlarge
      - g4dn.8xlarge
      - g4dn.12xlarge
      - g4dn.16xlarge
    Default: g4dn.xlarge

  WorkstationConnectionManager:
    Type: String
    Description: 'Specify whether you want to run Teradici PCoIP or NiceDcv server to connect to the workstation.'
    AllowedValues:
      - teradici
      - nicedcv
    Default: teradici

  WorkstationEBSVolumeSize:
    Type: Number
    Description: 'Volume size of the Workstation instance in GiB.'
    MaxValue: 16000
    MinValue: 100
    Default: 100

  WorkstationAccessCIDR:
    Type: String
    Description: "CIDR block of an on-premise IP address. Input your network's current public or private IP depending if the Workstation is being placed in a public or private subnet."
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Default: 0.0.0.0/0

  EC2UserPassword:
    Type: String
    Description: 'Set password for ec2-user.'
    NoEcho: true

  RepositoryInstanceType:
    Type: String
    Description: 'The EC2 instance type for the Deadline repository.'
    Default: m5.2xlarge

  AppVersion:
    Type: String
    Description: 'The version of Deadline application.'
    AllowedValues:
      - 10.1.3.6
      - 10.0.24.4
    Default: 10.1.3.6

  LicenseServerInstanceType:
    Type: String
    Description: 'The EC2 instance type for the Deadline License server.'
    Default: m5.large

  LicenseServerVersion:
    Type: String
    Description: 'The version of License server.'
    AllowedValues:
      - 1.1
      - 11.13.1.2.0
    Default: 1.1

  DeadlineLicense:
    Type: String
    Description: 'If you have license key, add it here.'
    NoEcho: true
    Default: 123456789012

  RenderNodeInstanceType:
    Type: CommaDelimitedList
    Description: 'The EC2 instance type for the Deadline Render nodes.'
    AllowedValues:
      - c5.2xlarge,c4.2xlarge
      - c5.4xlarge,c4.4xlarge
      - c5.9xlarge,c4.8xlarge
    Default: c5.4xlarge,c4.4xlarge

  RenderNodeTargetCapacity:
    Type: String
    Description: 'The number of instances in the spot fleet.'
    Default: 2

  Environment:
    Type: String
    Description: 'The type of environment to tag your infrastructure with. You can specify DEV (development), TEST (test), or PROD (production).'
    AllowedValues:
      - DEV
      - TEST
      - PROD
    Default: DEV

  ArtefactBucketName:
    Type: String
    Description: 'S3 bucket name for the application assets.'
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-.]*[0-9a-zA-Z])*$
    ConstraintDescription: 'S3 bucket name can include numbers, lowercase letters, uppercase letters, periods (.), and hyphens (-). It cannot start or end with a hyphen (-).'
    Default: aws-digital-content-creation-render-environment

Mappings:
  AMIRegionMap:
    us-east-1:
      NICEDCV: ami-07518881491131823
      AMZL2: ami-0a887e401f7654935
      TERADICI: ami-0238c12cc43ff8477

    us-east-2:
      NICEDCV: ami-0879dc7a6c4d1e6db
      AMZL2: ami-0e38b48473ea57778
      TERADICI: ami-08df7a7659b2dbb26

    us-west-2:
      NICEDCV: ami-002a233b37206a269
      AMZL2: ami-0e8c04af2729ff1bb
      TERADICI: ami-0985616571f7e40e6

    ap-northeast-1:
      NICEDCV: ami-0dec805ab1bd36aba
      AMZL2: ami-0af1df87db7b650f4
      TERADICI: ami-074d1a220856d16a9

    ap-southeast-1:
      NICEDCV: ami-0ab0206f56fc9996c
      AMZL2: ami-0f02b24005e4aec36
      TERADICI: ami-0e788f80749a81551

    eu-central-1:
      NICEDCV: ami-03d479014c2c2f8d8
      AMZL2: ami-0df0e7600ad0913a9
      TERADICI: ami-0092b0ea1d0684c7d

    eu-west-1:
      NICEDCV: ami-02060b15ad43c10eb
      AMZL2: ami-099a8245f5daa82bf
      TERADICI: ami-002ad6a07b4b90413

Conditions:
  CreateClientVPN:
    !Equals [!Ref CreateVPNEndpoint, true]

  IsTeradici:
    !Equals [!Ref WorkstationConnectionManager, teradici]

Resources:
  IAMStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: iam.template
      TimeoutInMinutes: 10

  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: vpc.template
      TimeoutInMinutes: 20
      Parameters:
        AvailabilityZones:
          Fn::Join:
            - ','
            - !Ref AvailabilityZones
        VPCName: !Ref VPCName
        VPCCidr: !Ref VPCCidr
        VPCPublicSubnet1Cidr: !Ref VPCPublicSubnet1Cidr
        VPCPublicSubnet2Cidr: !Ref VPCPublicSubnet2Cidr
        VPCPrivateSubnet1Cidr: !Ref VPCPrivateSubnet1Cidr
        VPCPrivateSubnet2Cidr: !Ref VPCPrivateSubnet2Cidr

  ClientVPNStack:
    Type: AWS::CloudFormation::Stack
    Condition: CreateClientVPN
    Properties:
      TemplateURL: client-vpn.template
      Parameters:
        ClientCidrBlock: !Ref ClientCidrBlock
        ServerCertificateArn: !Ref ServerCertificateArn
        ClientCertificateArn: !Ref ClientCertificateArn
        SubnetID: !GetAtt VPCStack.Outputs.PrivateSubnet1
        TargetNetworkCidr: !Ref TargetNetworkCidr
        VPC: !GetAtt VPCStack.Outputs.VpcID

  SecurityGroupsHelperStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: security-groups-helper.template
      TimeoutInMinutes: 10
      Parameters:
        VpcID: !GetAtt VPCStack.Outputs.VpcID
        WorkstationAccessCIDR: !Ref WorkstationAccessCIDR
        Environment: !Ref Environment
        WorkstationConnectionManager: !Ref WorkstationConnectionManager

  EfsStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: efs.template
      TimeoutInMinutes: 20
      Parameters:
        VpcID: !GetAtt VPCStack.Outputs.VpcID
        PrivateSubnet1: !GetAtt VPCStack.Outputs.PrivateSubnet1
        PrivateSubnet2: !GetAtt VPCStack.Outputs.PrivateSubnet2
        RepositorySecurityGroup: !GetAtt SecurityGroupsHelperStack.Outputs.RepositorySecurityGroup
        RenderNodeSecurityGroup: !GetAtt SecurityGroupsHelperStack.Outputs.RenderNodeSecurityGroup
        WorkstationSecurityGroup: !GetAtt SecurityGroupsHelperStack.Outputs.WorkstationSecurityGroup
        Environment: !Ref Environment

  LicenseServerStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: license-server.template
      TimeoutInMinutes: 30
      Parameters:
        PrivateSubnet1: !GetAtt VPCStack.Outputs.PrivateSubnet1
        LicenseServerSecurityGroup: !GetAtt SecurityGroupsHelperStack.Outputs.LicenseServerSecurityGroup
        InstanceType: !Ref LicenseServerInstanceType
        InstanceAMI: !FindInMap [AMIRegionMap, !Ref 'AWS::Region', AMZL2]
        EC2InstanceProfile: !GetAtt IAMStack.Outputs.EC2InstanceProfile
        LicenseServerVersion: !Ref LicenseServerVersion
        DeadlineLicense: !Ref DeadlineLicense
        ArtefactBucketName: !Ref ArtefactBucketName
        Environment: !Ref Environment

  RepositoryStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: repository.template
      TimeoutInMinutes: 30
      Parameters:
        PrivateSubnet1: !GetAtt VPCStack.Outputs.PrivateSubnet1
        RepositorySecurityGroup: !GetAtt SecurityGroupsHelperStack.Outputs.RepositorySecurityGroup
        EfsFileSystem: !GetAtt EfsStack.Outputs.EfsFileSystem
        InstanceType: !Ref RepositoryInstanceType
        InstanceAMI: !FindInMap [AMIRegionMap, !Ref 'AWS::Region', AMZL2]
        EC2InstanceProfile: !GetAtt IAMStack.Outputs.EC2InstanceProfile
        EC2UserPassword: !Ref EC2UserPassword #pragma: allowlist secret
        AppVersion: !Ref AppVersion
        Environment: !Ref Environment
        ArtefactBucketName: !Ref ArtefactBucketName

  RenderNodeStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: render-node.template
      TimeoutInMinutes: 30
      Parameters:
        AvailabilityZones:
          Fn::Join:
            - ','
            - !Ref AvailabilityZones
        PrivateSubnet1: !GetAtt VPCStack.Outputs.PrivateSubnet1
        PrivateSubnet2: !GetAtt VPCStack.Outputs.PrivateSubnet2
        RenderNodeSecurityGroup: !GetAtt SecurityGroupsHelperStack.Outputs.RenderNodeSecurityGroup
        EfsFileSystem: !GetAtt EfsStack.Outputs.EfsFileSystem
        InstanceTypes:
          Fn::Join:
            - ','
            - !Ref RenderNodeInstanceType
        InstanceAMI: !FindInMap [AMIRegionMap, !Ref 'AWS::Region', AMZL2]
        Environment: !Ref Environment
        EC2InstanceProfile: !GetAtt IAMStack.Outputs.EC2InstanceProfile
        SpotFleetARN: !GetAtt IAMStack.Outputs.SpotFleetARN
        AppVersion: !Ref AppVersion
        LicenseServerInstancePrivateIp: !GetAtt LicenseServerStack.Outputs.LicenseServerInstancePrivateIp
        RepositoryInstancePrivateIp: !GetAtt RepositoryStack.Outputs.RepositoryInstancePrivateIp
        EC2UserPassword: !Ref EC2UserPassword #pragma: allowlist secret
        ArtefactBucketName: !Ref ArtefactBucketName
        RenderNodeTargetCapacity: !Ref RenderNodeTargetCapacity

  WorkstationStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: workstation.template
      TimeoutInMinutes: 30
      Parameters:
        SubnetID: !If
        - CreateClientVPN
        - !GetAtt VPCStack.Outputs.PrivateSubnet1
        - !GetAtt VPCStack.Outputs.PublicSubnet1
        CreateVPNEndpoint: !Ref CreateVPNEndpoint
        WorkstationSecurityGroup: !GetAtt SecurityGroupsHelperStack.Outputs.WorkstationSecurityGroup
        EfsFileSystem: !GetAtt EfsStack.Outputs.EfsFileSystem
        InstanceType: !Ref WorkstationInstanceType
        WorkstationEBSVolumeSize: !Ref WorkstationEBSVolumeSize
        InstanceAMI: !If
          - IsTeradici
          - !FindInMap [AMIRegionMap, !Ref 'AWS::Region', TERADICI]
          - !FindInMap [AMIRegionMap, !Ref 'AWS::Region', NICEDCV]
        WorkstationInstanceProfile: !GetAtt IAMStack.Outputs.WorkstationInstanceProfile
        WorkstationConnectionManager: !Ref WorkstationConnectionManager
        AppVersion: !Ref AppVersion
        Environment: !Ref Environment
        ArtefactBucketName: !Ref ArtefactBucketName
        RepositoryInstancePrivateIp: !GetAtt RepositoryStack.Outputs.RepositoryInstancePrivateIp
        LicenseServerInstancePrivateIp: !GetAtt LicenseServerStack.Outputs.LicenseServerInstancePrivateIp
        EC2UserPassword: !Ref EC2UserPassword #pragma: allowlist secret

Outputs:
  TemplateType:
    Value: AWS Digital Content Creation Architecture - AWS ThinkBox Deadline.

  WorkstationIP:
    Value: !If
      - IsTeradici
      - !GetAtt WorkstationStack.Outputs.WorkstationIP
      - !Join [ '', [ 'https://', !GetAtt WorkstationStack.Outputs.WorkstationIP, ':8443' ] ]

  ClientVpnEndpointID:
    Condition: CreateClientVPN
    Value: !GetAtt ClientVPNStack.Outputs.ClientVpnEndpointID
