AWSTemplateFormatVersion: "2010-09-09"

Description: Provides configuration for a Deadline workstation instance.

Parameters:
  AvailabilityZones:
    Type: List<AWS::EC2::AvailabilityZone::Name>

  PrivateSubnet1:
    Type: AWS::EC2::Subnet::Id

  PrivateSubnet2:
    Type: AWS::EC2::Subnet::Id

  RenderNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id

  InstanceTypes:
    Type: List<String>

  InstanceAMI:
    Type: AWS::EC2::Image::Id

  Environment:
    Type: String

  EC2InstanceProfile:
    Type: String

  SpotFleetARN:
    Type: String

  AppVersion:
    Type: String

  LicenseServerInstancePrivateIp:
    Type: String

  RepositoryInstancePrivateIp:
    Type: String

  EC2UserPassword:
    Type: String
    NoEcho: true

  ArtefactBucketName:
    Type: String

  RenderNodeTargetCapacity:
    Type: String

  EfsFileSystem:
    Type: String

Resources:
  RenderNodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          dcc_install:
            - instance_prep
            - artefacts_download
            - blender_download
            - app_install
        instance_prep:
          packages:
            yum:
              system-lsb: []
              cifs-utils: []
          files:
            /opt/scripts/ec2-mount-ebs-volume.sh:
              content: |
                #!/usr/bin/env bash
                  mkdir -p /data
                  while [ ! -b $(readlink -f /dev/xvdh) ]; do echo "waiting for device /dev/xvdh"; sleep 5 ; done
                  blkid $(readlink -f /dev/xvdh) || mkfs -t ext4 $(readlink -f /dev/xvdh)
                  e2label $(readlink -f /dev/xvdh) dcc-data
                  grep -q ^LABEL=dcc-data /etc/fstab || echo 'LABEL=dcc-data /data ext4 defaults' >> /etc/fstab
                  grep -q "^$(readlink -f /dev/xvdh) /data " /proc/mounts || mount /data
              mode: "000755"
              owner: root
              group: root
            /opt/scripts/dns.sh:
              content: !Sub |
                #!/usr/bin/env bash
                results=1
                while [[ $results != 0 ]]; do
                  nslookup ${EfsFileSystem}.efs.${AWS::Region}.amazonaws.com
                  results=$?
                  if [[ $results = 1 ]]; then
                    sleep 30s
                  fi
                done
              mode: "000755"
              owner: root
              group: root
            /home/ec2-user/.smbcredentials:
              content: !Sub |
                username=ec2-user
                password=${EC2UserPassword}
              mode: "000400"
              owner: ec2-user
              group: ec2-user
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.RenderNodeLaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource RenderNodeLaunchTemplate --configsets dcc_install --region ${AWS::Region}
                runas=root
              mode: "000400"
              owner: root
              group: root
          commands:
            01-mount-ebs-volume:
              command: sh /opt/scripts/ec2-mount-ebs-volume.sh > /opt/scripts/ec2-mount-ebs-volume.log 2>&1
              test: test -x /opt/scripts/ec2-mount-ebs-volume.sh # check if filename exists and is executable
              ignoreErrors: false
            02-wait_for_dns_propogation:
              command: sh /opt/scripts/dns.sh
            03-mount_efs:
              command: !Sub |
                #!/bin/bash -xe
                EFS_DIRECTORY=/mnt/efs
                mkdir $EFS_DIRECTORY
                echo "${EfsFileSystem}:/ $EFS_DIRECTORY efs _netdev" >> /etc/fstab
                mount -a -t efs defaults
            04-set-permission-on-efs:
              command: chown -R ec2-user:root /mnt/efs
            05-mkdir_DeadlineRepository:
              command: mkdir -p /data/DeadlineRepository
            06-mount_DeadlineRepository:
              command: !Sub |
                # create fstab entry for Deadline repository
                echo "//${RepositoryInstancePrivateIp}/DeadlineRepository /data/DeadlineRepository cifs credentials=/home/ec2-user/.smbcredentials,uid=ec2-user 0 0" >> /etc/fstab
                # mount the Deadline repository
                mount -a
              ignoreErrors: true
            07-set_ec2_user_password:
              command: !Sub echo ${EC2UserPassword} | tee - | passwd ec2-user
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              amazon-ssm-agent:
                enabled: true
                ensureRunning: true
        artefacts_download:
          sources:
            /data/thinkbox: !Sub https://${ArtefactBucketName}.s3.amazonaws.com/Deadline-${AppVersion}-linux-installers.tar
        blender_download:
          sources:
            /usr/local: !Sub https://${ArtefactBucketName}.s3.amazonaws.com/Blender.zip
        app_install:
          commands:
            01-install_repository:
              command: !Sub |
                ls /data/thinkbox | grep DeadlineClient | \
                  (read data; /data/thinkbox/$data \
                  --mode unattended \
                  --prefix "/data/thinkbox/Deadline10" \
                  --connectiontype Repository \
                  --repositorydir "/data/DeadlineRepository" \
                  --licensemode Standard \
                  --licenseserver @${LicenseServerInstancePrivateIp} \
                  --launcherstartup true \
                  --slavestartup true \
                  --daemonuser "" \
                  --launcherdaemon true)
              ignoreErrors: true
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvdh
            Ebs:
              VolumeSize: 20
              VolumeType: gp2
              Encrypted: true
        ImageId: !Ref InstanceAMI
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        SecurityGroupIds:
          - !Ref RenderNodeSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: deadline-rendernode
              - Key: Environment
                Value: !Ref Environment
        UserData: !Base64
          Fn::Sub: |
            #!/bin/bash -xe
            yum -y update
            # Update aws-cfn-bootstrap to the latest
            yum install -y aws-cfn-bootstrap
            # Install efs-utils
            yum install -y amazon-efs-utils
            # Call cfn-init script to install files and packages
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource RenderNodeLaunchTemplate --configsets dcc_install --region ${AWS::Region}
            # # Signal the status from instance to WaitConditionHandle
            /opt/aws/bin/cfn-signal --success true --exit-code $? --reason "Build Process Complete" '${RenderNodeWaitConditionHandle}'

  RenderNodeWaitConditionHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  RenderNodeWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: RenderNodeSpotFleet
    Properties:
      Handle: !Ref RenderNodeWaitConditionHandle
      Timeout: "1800"
      Count: !Ref RenderNodeTargetCapacity

  RenderNodeSpotFleet:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: diversified
        IamFleetRole: !Ref SpotFleetARN
        TargetCapacity: !Ref RenderNodeTargetCapacity
        LaunchTemplateConfigs:
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref RenderNodeLaunchTemplate
              Version: "1"
            Overrides:
              - InstanceType: !Select [0, !Ref InstanceTypes]
                AvailabilityZone: !Select [0, !Ref AvailabilityZones]
                SubnetId: !Ref PrivateSubnet1
              - InstanceType: !Select [1, !Ref InstanceTypes]
                AvailabilityZone: !Select [1, !Ref AvailabilityZones]
                SubnetId: !Ref PrivateSubnet2

Outputs:
  DeadlineVersion:
    Value: !Ref AppVersion
